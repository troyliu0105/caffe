name: "ResNet-18"
layer {
  name: "data"
  type: "AnnotatedData"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    scale: 0.007843
    mean_value: 104
    mean_value: 117
    mean_value: 123
    force_color: true
    resize_param {
      prob: 0.1
      resize_mode: WARP
      height: 320
      width: 320
      interp_mode: LINEAR
      interp_mode: AREA
      interp_mode: LANCZOS4
    }
    resize_param {
      prob: 0.1
      resize_mode: WARP
      height: 352
      width: 352
      interp_mode: LINEAR
      interp_mode: AREA
      interp_mode: LANCZOS4
    }
    resize_param {
      prob: 0.1
      resize_mode: WARP
      height: 384
      width: 384
      interp_mode: LINEAR
      interp_mode: AREA
      interp_mode: LANCZOS4
    }
    resize_param {
      prob: 0.1
      resize_mode: WARP
      height: 416
      width: 416
      interp_mode: LINEAR
      interp_mode: AREA
      interp_mode: LANCZOS4
    }
    resize_param {
      prob: 0.1
      resize_mode: WARP
      height: 448
      width: 448
      interp_mode: LINEAR
      interp_mode: AREA
      interp_mode: LANCZOS4
    }
    resize_param {
      prob: 0.1
      resize_mode: WARP
      height: 480
      width: 480
      interp_mode: LINEAR
      interp_mode: AREA
      interp_mode: LANCZOS4
    }
    resize_param {
      prob: 0.1
      resize_mode: WARP
      height: 512
      width: 512
      interp_mode: LINEAR
      interp_mode: AREA
      interp_mode: LANCZOS4
    }
    resize_param {
      prob: 0.1
      resize_mode: WARP
      height: 544
      width: 544
      interp_mode: LINEAR
      interp_mode: AREA
      interp_mode: LANCZOS4
    }
    resize_param {
      prob: 0.1
      resize_mode: WARP
      height: 576
      width: 576
      interp_mode: LINEAR
      interp_mode: AREA
      interp_mode: LANCZOS4
    }
    resize_param {
      prob: 0.1
      resize_mode: WARP
      height: 608
      width: 608
      interp_mode: LINEAR
      interp_mode: AREA
      interp_mode: LANCZOS4
    }
    emit_constraint {
      emit_type: CENTER
    }
    distort_param {
      brightness_prob: 0.5
      brightness_delta: 32.0
      contrast_prob: 0.5
      contrast_lower: 0.5
      contrast_upper: 1.5
      hue_prob: 0.5
      hue_delta: 18.0
      saturation_prob: 0.5
      saturation_lower: 0.5
      saturation_upper: 1.5
      random_order_prob: 0.5
    }
    noise_param {
      hist_eq: true
      hist_eq_prob: 0.5
      inverse: false
      decolorize: false
      gauss_blur: true
      gauss_blur_prob: 0.15
      posterize: false
      saltpepper: true
      saltpepper_prob: 0.25
      saltpepper_param {
        fraction: 0.01
      }
      convert_to_hsv: false
    }
  }
  data_param {
    source: "data/VOC0712/VOC0712_trainval_lmdb"
    batch_size: 4
    prefetch: 4
    backend: LMDB
  }
  annotated_data_param {
    #mosaic: true
    yolo_data_type: true
    yolo_data_jitter: 0.3
    label_map_file: "data/VOC0712/labelmap_voc.prototxt"
  }
}
layer {
  name: "data"
  type: "AnnotatedData"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: true
    scale: 0.007843
    mean_value: 104
    mean_value: 117
    mean_value: 123
    force_color: true
    resize_param {
      prob: 1.0
      resize_mode: WARP
      height: 416
      width: 416
      interp_mode: LINEAR
    }
  }
  data_param {
    source: "data/VOC0712/VOC0712_test_lmdb"
    batch_size: 1
    backend: LMDB
  }
  annotated_data_param {
    batch_sampler {}
    yolo_data_type: true
    label_map_file:  "data/VOC0712/labelmap_voc.prototxt"
  }
}

layer {
  bottom: "data"
  top: "conv1"
  name: "conv1"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv1"
  top: "conv1"
  name: "bn_conv1"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv1"
  top: "conv1"
  name: "scale_conv1"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv1"
  top: "conv1"
  name: "conv1_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "conv1"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    kernel_size: 3
    stride: 2
    #pad: 1
    #round_mode: FLOOR
    pool: MAX
    engine: CUDNN
  }
}

# layer 1
layer {
  bottom: "pool1"
  top: "res2a_branch2a"
  name: "res2a_branch2a"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res2a_branch2a"
  top: "res2a_branch2a"
  name: "bn2a_branch2a"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res2a_branch2a"
  top: "res2a_branch2a"
  name: "scale2a_branch2a"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res2a_branch2a"
  top: "res2a_branch2a"
  name: "res2a_branch2a_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res2a_branch2a"
  top: "res2a_branch2b"
  name: "res2a_branch2b"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res2a_branch2b"
  top: "res2a_branch2b"
  name: "bn2a_branch2b"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res2a_branch2b"
  top: "res2a_branch2b"
  name: "scale2a_branch2b"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "pool1"
  bottom: "res2a_branch2b"
  top: "res2a"
  name: "res2a"
  type: "Eltwise"
  eltwise_param {
    operation: SUM
  }
}

layer {
  bottom: "res2a"
  top: "res2a"
  name: "res2a_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res2a"
  top: "res2b_branch2a"
  name: "res2b_branch2a"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res2b_branch2a"
  top: "res2b_branch2a"
  name: "bn2b_branch2a"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res2b_branch2a"
  top: "res2b_branch2a"
  name: "scale2b_branch2a"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res2b_branch2a"
  top: "res2b_branch2a"
  name: "res2b_branch2a_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res2b_branch2a"
  top: "res2b_branch2b"
  name: "res2b_branch2b"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res2b_branch2b"
  top: "res2b_branch2b"
  name: "bn2b_branch2b"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res2b_branch2b"
  top: "res2b_branch2b"
  name: "scale2b_branch2b"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res2a"
  bottom: "res2b_branch2b"
  top: "res2b"
  name: "res2b"
  type: "Eltwise"
  eltwise_param {
    operation: SUM
  }
}

layer {
  bottom: "res2b"
  top: "res2b"
  name: "res2b_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

# layer 2
layer {
  bottom: "res2b"
  top: "res3a_branch2a"
  name: "res3a_branch2a"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res3a_branch2a"
  top: "res3a_branch2a"
  name: "bn3a_branch2a"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res3a_branch2a"
  top: "res3a_branch2a"
  name: "scale3a_branch2a"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res3a_branch2a"
  top: "res3a_branch2a"
  name: "res3a_branch2a_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res3a_branch2a"
  top: "res3a_branch2b"
  name: "res3a_branch2b"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res3a_branch2b"
  top: "res3a_branch2b"
  name: "bn3a_branch2b"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res3a_branch2b"
  top: "res3a_branch2b"
  name: "scale3a_branch2b"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res2b"
  top: "res3a_branch1"
  name: "res3a_branch1"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    pad: 0
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res3a_branch1"
  top: "res3a_branch1"
  name: "bn3a_branch1"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res3a_branch1"
  top: "res3a_branch1"
  name: "scale3a_branch1"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res3a_branch1"
  bottom: "res3a_branch2b"
  top: "res3a"
  name: "res3a"
  type: "Eltwise"
  eltwise_param {
    operation: SUM
  }
}

layer {
  bottom: "res3a"
  top: "res3a"
  name: "res3a_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res3a"
  top: "res3b_branch2a"
  name: "res3b_branch2a"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res3b_branch2a"
  top: "res3b_branch2a"
  name: "bn3b_branch2a"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res3b_branch2a"
  top: "res3b_branch2a"
  name: "scale3b_branch2a"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res3b_branch2a"
  top: "res3b_branch2a"
  name: "res3b_branch2a_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res3b_branch2a"
  top: "res3b_branch2b"
  name: "res3b_branch2b"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res3b_branch2b"
  top: "res3b_branch2b"
  name: "bn3b_branch2b"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res3b_branch2b"
  top: "res3b_branch2b"
  name: "scale3b_branch2b"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res3a"
  bottom: "res3b_branch2b"
  top: "res3b"
  name: "res3b"
  type: "Eltwise"
  eltwise_param {
    operation: SUM
  }
}

layer {
  bottom: "res3b"
  top: "res3b"
  name: "res3b_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

# layer3
layer {
  bottom: "res3b"
  top: "res4a_branch2a"
  name: "res4a_branch2a"
  type: "Convolution"
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
    stride: 2
    weight_filler {
        type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res4a_branch2a"
  top: "res4a_branch2a"
  name: "bn4a_branch2a"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res4a_branch2a"
  top: "res4a_branch2a"
  name: "scale4a_branch2a"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res4a_branch2a"
  top: "res4a_branch2a"
  name: "res4a_branch2a_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res4a_branch2a"
  top: "res4a_branch2b"
  name: "res4a_branch2b"
  type: "Convolution"
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res4a_branch2b"
  top: "res4a_branch2b"
  name: "bn4a_branch2b"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res4a_branch2b"
  top: "res4a_branch2b"
  name: "scale4a_branch2b"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res3b"
  top: "res4a_branch1"
  name: "res4a_branch1"
  type: "Convolution"
  convolution_param {
    num_output: 256
    kernel_size: 1
    pad: 0
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res4a_branch1"
  top: "res4a_branch1"
  name: "bn4a_branch1"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res4a_branch1"
  top: "res4a_branch1"
  name: "scale4a_branch1"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res4a_branch1"
  bottom: "res4a_branch2b"
  top: "res4a"
  name: "res4a"
  type: "Eltwise"
  eltwise_param {
    operation: SUM
  }
}

layer {
  bottom: "res4a"
  top: "res4a"
  name: "res4a_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res4a"
  top: "res4b_branch2a"
  name: "res4b_branch2a"
  type: "Convolution"
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res4b_branch2a"
  top: "res4b_branch2a"
  name: "bn4b_branch2a"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res4b_branch2a"
  top: "res4b_branch2a"
  name: "scale4b_branch2a"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res4b_branch2a"
  top: "res4b_branch2a"
  name: "res4b_branch2a_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res4b_branch2a"
  top: "res4b_branch2b"
  name: "res4b_branch2b"
  type: "Convolution"
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res4b_branch2b"
  top: "res4b_branch2b"
  name: "bn4b_branch2b"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res4b_branch2b"
  top: "res4b_branch2b"
  name: "scale4b_branch2b"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res4a"
  bottom: "res4b_branch2b"
  top: "res4b"
  name: "res4b"
  type: "Eltwise"
  eltwise_param {
    operation: SUM
  }
}

layer {
  bottom: "res4b"
  top: "res4b"
  name: "res4b_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

# layer 4
layer {
  bottom: "res4b"
  top: "res5a_branch2a"
  name: "res5a_branch2a"
  type: "Convolution"
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res5a_branch2a"
  top: "res5a_branch2a"
  name: "bn5a_branch2a"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res5a_branch2a"
  top: "res5a_branch2a"
  name: "scale5a_branch2a"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res5a_branch2a"
  top: "res5a_branch2a"
  name: "res5a_branch2a_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res5a_branch2a"
  top: "res5a_branch2b"
  name: "res5a_branch2b"
  type: "Convolution"
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res5a_branch2b"
  top: "res5a_branch2b"
  name: "bn5a_branch2b"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res5a_branch2b"
  top: "res5a_branch2b"
  name: "scale5a_branch2b"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res4b"
  top: "res5a_branch1"
  name: "res5a_branch1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    kernel_size: 1
    pad: 0
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res5a_branch1"
  top: "res5a_branch1"
  name: "bn5a_branch1"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res5a_branch1"
  top: "res5a_branch1"
  name: "scale5a_branch1"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res5a_branch1"
  bottom: "res5a_branch2b"
  top: "res5a"
  name: "res5a"
  type: "Eltwise"
  eltwise_param {
    operation: SUM
  }
}

layer {
  bottom: "res5a"
  top: "res5a"
  name: "res5a_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res5a"
  top: "res5b_branch2a"
  name: "res5b_branch2a"
  type: "Convolution"
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res5b_branch2a"
  top: "res5b_branch2a"
  name: "bn5b_branch2a"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res5b_branch2a"
  top: "res5b_branch2a"
  name: "scale5b_branch2a"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res5b_branch2a"
  top: "res5b_branch2a"
  name: "res5b_branch2a_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res5b_branch2a"
  top: "res5b_branch2b"
  name: "res5b_branch2b"
  type: "Convolution"
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "res5b_branch2b"
  top: "res5b_branch2b"
  name: "bn5b_branch2b"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "res5b_branch2b"
  top: "res5b_branch2b"
  name: "scale5b_branch2b"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "res5a"
  bottom: "res5b_branch2b"
  top: "res5b"
  name: "res5b"
  type: "Eltwise"
  eltwise_param {
    operation: SUM
  }
}

layer {
  bottom: "res5b"
  top: "res5b"
  name: "res5b_relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "res5b"
  top: "conv22"
  name: "conv22"
  type: "Convolution"
  convolution_param {
    num_output: 256
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv22"
  top: "conv22"
  name: "conv22/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv22"
  top: "conv22"
  name: "conv22/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv22"
  top: "conv22"
  name: "conv22/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "conv22"
  top: "conv23"
  name: "conv23"
  type: "Convolution"
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv23"
  top: "conv23"
  name: "conv23/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv23"
  top: "conv23"
  name: "conv23/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv23"
  top: "conv23"
  name: "conv23/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "conv23"
  top: "conv24"
  name: "conv24"
  type: "Convolution"
  convolution_param {
    num_output: 256
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv24"
  top: "conv24"
  name: "conv24/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv24"
  top: "conv24"
  name: "conv24/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv24"
  top: "conv24"
  name: "conv24/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "conv24"
  top: "conv25"
  name: "conv25"
  type: "Convolution"
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv25"
  top: "conv25"
  name: "conv25/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv25"
  top: "conv25"
  name: "conv25/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv25"
  top: "conv25"
  name: "conv25/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}
#################
layer{
  name: "yolo_large"
  type: "Convolution"
  bottom: "conv25"
  top: "yolo_large"
  convolution_param {
    num_output: 75
    kernel_size: 1
    stride: 1
    pad: 0
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
#################

layer {
  bottom: "conv24"
  top: "conv26"
  name: "conv26"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv26"
  top: "conv26"
  name: "conv26/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv26"
  top: "conv26"
  name: "conv26/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv26"
  top: "conv26"
  name: "conv26/relu"
  type: "ReLU"
}

layer {
  bottom: "conv26"
  top: "conv26-upsample"
  name: "conv26-upsample"
  type: "Upsample"
  upsample_param {
    scale: 2
  }
}

layer {
  bottom: "conv26-upsample"
  bottom: "res4b"
  top: "conv26-route"
  name: "conv26-route"
  type: "Concat"
}

layer {
  bottom: "conv26-route"
  top: "conv27"
  name: "conv27"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv27"
  top: "conv27"
  name: "conv27/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv27"
  top: "conv27"
  name: "conv27/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv27"
  top: "conv27"
  name: "conv27/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "conv27"
  top: "conv28"
  name: "conv28"
  type: "Convolution"
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv28"
  top: "conv28"
  name: "conv28/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv28"
  top: "conv28"
  name: "conv28/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv28"
  top: "conv28"
  name: "conv28/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "conv28"
  top: "conv29"
  name: "conv29"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv29"
  top: "conv29"
  name: "conv29/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv29"
  top: "conv29"
  name: "conv29/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv29"
  top: "conv29"
  name: "conv29/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "conv29"
  top: "conv30"
  name: "conv30"
  type: "Convolution"
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv30"
  top: "conv30"
  name: "conv30/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv30"
  top: "conv30"
  name: "conv30/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv30"
  top: "conv30"
  name: "conv30/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

#################
layer{
  name: "yolo_middle"
  type: "Convolution"
  bottom: "conv30"
  top: "yolo_middle"
  convolution_param {
    num_output: 75
    kernel_size: 1
    stride: 1
    pad: 0
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
#################

layer {
  bottom: "conv29"
  top: "conv31"
  name: "conv31"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv31"
  top: "conv31"
  name: "conv31/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv31"
  top: "conv31"
  name: "conv31/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv31"
  top: "conv31"
  name: "conv31/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "conv31"
  top: "conv31-upsample"
  name: "conv31-upsample"
  type: "Upsample"
  upsample_param {
    scale: 2
  }
}

layer {
  bottom: "conv31-upsample"
  bottom: "res3b"
  top: "conv31-route"
  name: "conv31-route"
  type: "Concat"
}

layer {
  bottom: "conv31-route"
  top: "conv32"
  name: "conv32"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv32"
  top: "conv32"
  name: "conv32/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv32"
  top: "conv32"
  name: "conv32/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv32"
  top: "conv32"
  name: "conv32/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "conv32"
  top: "conv33"
  name: "conv33"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv33"
  top: "conv33"
  name: "conv33/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv33"
  top: "conv33"
  name: "conv33/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv33"
  top: "conv33"
  name: "conv33/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "conv33"
  top: "conv34"
  name: "conv34"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv34"
  top: "conv34"
  name: "conv34/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv34"
  top: "conv34"
  name: "conv34/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv34"
  top: "conv34"
  name: "conv34/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

layer {
  bottom: "conv34"
  top: "conv35"
  name: "conv35"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_term: false
    engine: CUDNN
  }
}

layer {
  bottom: "conv35"
  top: "conv35"
  name: "conv35/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.1
  }
}

layer {
  bottom: "conv35"
  top: "conv35"
  name: "conv35/scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  bottom: "conv35"
  top: "conv35"
  name: "conv35/relu"
  type: "ReLU"
  relu_param {
    engine: CUDNN
  }
}

#################
layer{
  name: "yolo_small"
  type: "Convolution"
  bottom: "conv35"
  top: "yolo_small"
  convolution_param {
    num_output: 75
    kernel_size: 1
    stride: 1
    pad: 0
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
#################

######################################################################


layer {
  name: "yolo_large_loss"
  type: "Yolov3"
  bottom: "yolo_large"
  bottom: "label"
  top: "yolo_large_loss"
  loss_weight: 1
  include {
    phase: TRAIN
  }
  yolov3_param {
    display: 800
    side: 13
    anchors_scale: 32
    num_class: 20
    num: 3
    object_scale: 5.0
    noobject_scale: 1.0
    class_scale: 1.0
    coord_scale: 1.0
    thresh: 0.5
    use_logic_gradient : false
    iou_loss: GIOU
    label_smooth_eps: 0.0
    #[[[23, 29],   [48, 65],   [117, 81]],
    #[[68, 144],  [126, 203], [240, 118]],
    #[[204, 265], [326, 188], [338, 298]]]
# anchor mark1
#    biases: 23
#    biases: 29
#    biases: 48
#    biases: 65
#    biases: 117
#    biases: 81
#    biases: 68
#    biases: 144
#    biases: 126
#    biases: 203
#    biases: 240
#    biases: 118
#    biases: 204
#    biases: 265
#    biases: 326
#    biases: 188
#    biases: 338
#    biases: 298
# anchor mark2
    biases: 33
    biases: 48
    biases: 50
    biases: 108
    biases: 127
    biases: 96
    biases: 78
    biases: 202
    biases: 178
    biases: 179
    biases: 130
    biases: 295
    biases: 332
    biases: 195
    biases: 228
    biases: 326
    biases: 365
    biases: 359
    mask: 6
    mask: 7
    mask: 8
  }
}

layer {
  name: "yolo_middle_loss"
  type: "Yolov3"
  bottom: "yolo_middle"
  bottom: "label"
  top: "yolo_middle_loss"
  loss_weight: 1
  include {
    phase: TRAIN
  }
  yolov3_param {
    display: 800
    side: 26
    anchors_scale: 16
    num_class: 20
    num: 3
    object_scale: 5.0
    noobject_scale: 1.0
    class_scale: 1.0
    coord_scale: 1.0
    thresh: 0.5
    use_logic_gradient : false
    iou_loss: GIOU
    label_smooth_eps: 0.0
    #[[[23, 29],   [48, 65],   [117, 81]],
    #[[68, 144],  [126, 203], [240, 118]],
    #[[204, 265], [326, 188], [338, 298]]]
# anchor mark1
#    biases: 23
#    biases: 29
#    biases: 48
#    biases: 65
#    biases: 117
#    biases: 81
#    biases: 68
#    biases: 144
#    biases: 126
#    biases: 203
#    biases: 240
#    biases: 118
#    biases: 204
#    biases: 265
#    biases: 326
#    biases: 188
#    biases: 338
#    biases: 298
# anchor mark2
    biases: 33
    biases: 48
    biases: 50
    biases: 108
    biases: 127
    biases: 96
    biases: 78
    biases: 202
    biases: 178
    biases: 179
    biases: 130
    biases: 295
    biases: 332
    biases: 195
    biases: 228
    biases: 326
    biases: 365
    biases: 359
    mask: 3
    mask: 4
    mask: 5
  }
}

layer {
  name: "yolo_small_loss"
  type: "Yolov3"
  bottom: "yolo_small"
  bottom: "label"
  top: "yolo_small_loss"
  loss_weight: 1
  include {
    phase: TRAIN
  }
  yolov3_param {
    display: 800
    side: 52
    anchors_scale: 8
    num_class: 20
    num: 3
    object_scale: 5.0
    noobject_scale: 1.0
    class_scale: 1.0
    coord_scale: 1.0
    thresh: 0.5
    use_logic_gradient : false
    iou_loss: GIOU
    label_smooth_eps: 0.0
    #[[[23, 29],   [48, 65],   [117, 81]],
    #[[68, 144],  [126, 203], [240, 118]],
    #[[204, 265], [326, 188], [338, 298]]]
# anchor mark1
#    biases: 23
#    biases: 29
#    biases: 48
#    biases: 65
#    biases: 117
#    biases: 81
#    biases: 68
#    biases: 144
#    biases: 126
#    biases: 203
#    biases: 240
#    biases: 118
#    biases: 204
#    biases: 265
#    biases: 326
#    biases: 188
#    biases: 338
#    biases: 298
# anchor mark2
    biases: 33
    biases: 48
    biases: 50
    biases: 108
    biases: 127
    biases: 96
    biases: 78
    biases: 202
    biases: 178
    biases: 179
    biases: 130
    biases: 295
    biases: 332
    biases: 195
    biases: 228
    biases: 326
    biases: 365
    biases: 359
    mask: 0
    mask: 1
    mask: 2
  }
}

layer {
  name: "detection_out"
  type: "Yolov3DetectionOutput"
  bottom: "yolo_small"
  bottom: "yolo_middle"
  bottom: "yolo_large"
  top: "detection"
  include {
    phase: TEST
  }
  yolov3_detection_output_param {
    confidence_threshold: 0.01
    nms_threshold: 0.45
    num_classes: 20
# anchor mark1
#    biases: 23
#    biases: 29
#    biases: 48
#    biases: 65
#    biases: 117
#    biases: 81
#    biases: 68
#    biases: 144
#    biases: 126
#    biases: 203
#    biases: 240
#    biases: 118
#    biases: 204
#    biases: 265
#    biases: 326
#    biases: 188
#    biases: 338
#    biases: 298
# anchor mark2
    biases: 33
    biases: 48
    biases: 50
    biases: 108
    biases: 127
    biases: 96
    biases: 78
    biases: 202
    biases: 178
    biases: 179
    biases: 130
    biases: 295
    biases: 332
    biases: 195
    biases: 228
    biases: 326
    biases: 365
    biases: 359
    mask: 0
    mask: 1
    mask: 2
    mask: 3
    mask: 4
    mask: 5
    mask: 6
    mask: 7
    mask: 8
    mask_group_num: 3
    anchors_scale: 8
    anchors_scale: 16
    anchors_scale: 32
  }
}

layer {
  name: "yolo_eval"
  type: "DetectionEvaluate"
  bottom: "detection"
  bottom: "label"
  top: "eval"
  include {
    phase: TEST
  }
  detection_evaluate_param {
    num_classes: 21
    background_label_id: 0
    overlap_threshold: 0.5
    evaluate_difficult_gt: false
  }
}